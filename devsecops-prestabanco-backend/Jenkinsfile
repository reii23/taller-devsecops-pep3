pipeline {
    agent any
    tools {
        maven 'mvn'
        jdk 'jdk21'
    }
    stages {
        stage("Build") {
            steps {
                checkout scmGit(branches: [[name: '*/main'], [name: '*/develop']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/reii23/taller-devsecops-pep3']])
                dir('devsecops-prestabanco-backend') {
                    sh "mvn clean package -DskipTests"
                }
            }
        }
        stage("Test") {
            stages {
                stage("Unit Testing") {
                    steps {
                        dir('devsecops-prestabanco-backend') {
                            sh "mvn test"
                        }
                    }
                }
            }
        }
        stage("OWASP Dependency Check") {
            steps {
                dir('devsecops-prestabanco-backend') {
                    sh "mvn org.owasp:dependency-check-maven:8.4.3:check -DfailBuildOnCVSS=11 -DautoUpdate=true"
                    archiveArtifacts artifacts: 'target/dependency-check-report.*', allowEmptyArchive: true
                }
            }
        }
        stage("Static Analysis") {
            steps {
                dir('devsecops-prestabanco-backend') {
                    withSonarQubeEnv("sonarqube") {
                        sh "mvn clean verify sonar:sonar -Dsonar.projectKey=PrestaBanco-Backend -Dsonar.projectName='PrestaBanco Backend' -Dsonar.token=\${SONAR_AUTH_TOKEN}"
                    }
                }
            }
        }
        stage("GitLeaks Secret Scan") {
            steps {
                dir('devsecops-prestabanco-backend') {
                    script {
                        sh '''
                            if ! command -v gitleaks &> /dev/null; then
                                curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz | tar -xz -C /tmp
                                cp /tmp/gitleaks ./gitleaks
                                chmod +x ./gitleaks
                            fi
                        '''
                        
                        sh '''
                            GITLEAKS_CMD="gitleaks"
                            if [ ! -x "$(command -v gitleaks)" ]; then
                                GITLEAKS_CMD="./gitleaks"
                            fi
                            
                            $GITLEAKS_CMD detect --source . --report-format json --report-path gitleaks-report.json --verbose || true
                            $GITLEAKS_CMD detect --source . --report-format sarif --report-path gitleaks-report.sarif --verbose || true
                        '''
                        
                        archiveArtifacts artifacts: 'gitleaks-report.*', allowEmptyArchive: true
                        
                        script {
                            def reportExists = fileExists('gitleaks-report.json')
                            if (reportExists) {
                                def reportContent = readFile('gitleaks-report.json')
                                if (reportContent.trim() != "null" && reportContent.trim() != "[]") {
                                    echo "GitLeaks found potential secrets!"
                                } else {
                                    echo "No secrets detected"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("OWASP ZAP Security Scan") {
            steps {
                dir('devsecops-prestabanco-backend') {
                    script {
                        echo "Iniciando análisis DAST con OWASP ZAP..."
                        sh 'mkdir -p zap-reports'
                        sh '''
                            rm -f zap-reports/*
                            
                            if docker network ls | grep -q "prestabanco-network"; then
                                NETWORK_NAME=$(docker network ls | grep prestabanco-network | awk '{print $2}')
                                NETWORK_FLAG="--network $NETWORK_NAME"
                                TARGET_URL="http://prestabanco-backend:8090"
                            elif docker ps --format "table {{.Names}}" | grep -q prestabanco-backend; then
                                BACKEND_IP=$(docker inspect prestabanco-backend --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
                                TARGET_URL="http://$BACKEND_IP:8090"
                            else
                                TARGET_URL="http://172.17.0.1:8090"
                            fi
                            
                            echo "Target URL: $TARGET_URL"
                            
                            if curl -f --connect-timeout 10 "$TARGET_URL/health" > /dev/null 2>&1; then
                                echo "Backend accesible, ejecutando ZAP Baseline Scan..."
                                
                                docker run --rm $NETWORK_FLAG \
                                    -v $(pwd)/zap-reports:/zap/wrk:rw \
                                    --user root \
                                    ghcr.io/zaproxy/zaproxy:stable \
                                    zap-baseline.py -t $TARGET_URL \
                                    -J /zap/wrk/baseline-report.json \
                                    -r /zap/wrk/baseline-report.html \
                                    -x /zap/wrk/baseline-report.xml \
                                    -I || true
                                
                                if [ -f "zap-reports/baseline-report.html" ]; then
                                    echo "Reporte HTML generado exitosamente"
                                else
                                    echo "ERROR: No se generó el reporte HTML"
                                fi
                                
                                if [ -f "zap-reports/baseline-report.json" ]; then
                                    echo "Reporte JSON generado exitosamente"
                                else
                                    echo "ERROR: No se generó el reporte JSON"
                                fi
                                
                                if [ -f "zap-reports/baseline-report.xml" ]; then
                                    echo "Reporte XML generado exitosamente"
                                else
                                    echo "ERROR: No se generó el reporte XML"
                                fi
                                
                            else
                                echo "Backend no accesible en $TARGET_URL"
                                echo "Backend no accesible en $TARGET_URL" > zap-reports/zap-error.txt
                            fi
                            
                            echo "Detectando endpoints web..."
                            grep -r -E "(@RequestMapping|@GetMapping|@PostMapping|@PutMapping|@DeleteMapping)" \
                                --include="*.java" . > zap-reports/endpoints.txt || true
                            
                            echo "Archivos en zap-reports:"
                            ls -la zap-reports/ || true
                        '''
                        
                        archiveArtifacts artifacts: 'zap-reports/*', allowEmptyArchive: true
                        echo "Análisis OWASP ZAP completado"
                    }
                }
            }
        }
        stage("Deploy image"){
            when {
                branch "main"
            }
            steps {
                dir('devsecops-prestabanco-backend') {
                    sh "docker build . -t prestabanco/backend:latest"
                }
            }
        }
    }
    post {
        success {
            dir('devsecops-prestabanco-backend') {
                archiveArtifacts artifacts: 'target/*.jar', followSymlinks: false, onlyIfSuccessful: true
            }
        }
    }
}