pipeline {
    agent any
    tools {
        maven 'mvn'
        jdk 'jdk21'
    }
    stages {
        stage("Build") {
            steps {
                checkout scmGit(branches: [[name: '*/main'], [name: '*/develop']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/reii23/taller-devsecops-pep3']])
                dir('devsecops-prestabanco-backend') {
                    sh "mvn clean package -DskipTests"
                }
            }
        }
        stage("Test") {
            stages {
                stage("Unit Testing") {
                    steps {
                        dir('devsecops-prestabanco-backend') {
                            sh "mvn test"
                        }
                    }
                }
            }
        }
        stage("OWASP Dependency Check") {
            steps {
                dir('devsecops-prestabanco-backend') {
                    sh "mvn org.owasp:dependency-check-maven:8.4.3:check -DfailBuildOnCVSS=11 -DautoUpdate=true"
                    archiveArtifacts artifacts: 'target/dependency-check-report.*', allowEmptyArchive: true
                }
            }
        }
        stage("Static Analysis") {
            steps {
                dir('devsecops-prestabanco-backend') {
                    withSonarQubeEnv("sonarqube-maven") {
                        sh "mvn clean verify sonar:sonar -Dsonar.projectKey=PrestaBanco-Backend -Dsonar.projectName='PrestaBanco Backend'"
                    }
                }
            }
        }
        stage("GitLeaks Secret Scan") {
            steps {
                dir('devsecops-prestabanco-backend') {
                    script {
                        sh '''
                            if ! command -v gitleaks &> /dev/null; then
                                curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz | tar -xz -C /tmp
                                cp /tmp/gitleaks ./gitleaks
                                chmod +x ./gitleaks
                            fi
                        '''
                        
                        sh '''
                            GITLEAKS_CMD="gitleaks"
                            if [ ! -x "$(command -v gitleaks)" ]; then
                                GITLEAKS_CMD="./gitleaks"
                            fi
                            
                            $GITLEAKS_CMD detect --source . --report-format json --report-path gitleaks-report.json --verbose || true
                            $GITLEAKS_CMD detect --source . --report-format sarif --report-path gitleaks-report.sarif --verbose || true
                        '''
                        
                        archiveArtifacts artifacts: 'gitleaks-report.*', allowEmptyArchive: true
                        
                        script {
                            def reportExists = fileExists('gitleaks-report.json')
                            if (reportExists) {
                                def reportContent = readFile('gitleaks-report.json')
                                if (reportContent.trim() != "null" && reportContent.trim() != "[]") {
                                    echo "GitLeaks found potential secrets!"
                                } else {
                                    echo "No secrets detected"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("OWASP ZAP Security Scan") {
            steps {
                dir('devsecops-prestabanco-backend') {
                    script {
                        echo "Iniciando análisis DAST con OWASP ZAP..."
                        sh 'mkdir -p zap-reports'
                        sh '''
                            docker stop owasp-zap || true
                            docker rm owasp-zap || true
                            docker run --name owasp-zap -v $(pwd):/zap/wrk/:rw \
                                --rm ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
                                -t http://host.docker.internal:8080 \
                                -J zap-baseline-report.json \
                                -r zap-baseline-report.html \
                                -x zap-baseline-report.xml || true
                            mv zap-baseline-report.* zap-reports/ || true
                        '''
                        sh '''
                            echo "Detectando endpoints web..."
                            grep -r -E "(@RequestMapping|@GetMapping|@PostMapping|@PutMapping|@DeleteMapping)" \
                                --include="*.java" . > zap-reports/endpoints.txt || true
                            
                            echo "Endpoints encontrados: $(wc -l < zap-reports/endpoints.txt)"
                        '''
                        archiveArtifacts artifacts: 'zap-reports/*', allowEmptyArchive: true
                        echo "Análisis OWASP ZAP completado"
                    }
                }
            }
        }
        stage("Deploy image"){
            when {
                branch "main"
            }
            steps {
                dir('devsecops-prestabanco-backend') {
                    sh "docker build . -t prestabanco/backend:latest"
                }
            }
        }
    }
    post {
        success {
            dir('devsecops-prestabanco-backend') {
                archiveArtifacts artifacts: 'target/*.jar', followSymlinks: false, onlyIfSuccessful: true
            }
        }
    }
}