pipeline {
    agent any
    tools {
        maven 'mvn'
        jdk 'jdk21'
    }
    stages {
        stage("Build") {
            steps {
                checkout scmGit(branches: [[name: '*/main'], [name: '*/develop']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/reii23/taller-devsecops-pep3']])
                dir('devsecops-prestabanco-backend') {
                    sh "mvn clean package -DskipTests"
                }
            }
        }
        stage("Test") {
            stages {
                stage("Unit Testing") {
                    steps {
                        dir('devsecops-prestabanco-backend') {
                            sh "mvn test"
                        }
                    }
                }
            }
        }
        stage("OWASP Dependency Check") {
            steps {
                dir('devsecops-prestabanco-backend') {
                    sh "mvn org.owasp:dependency-check-maven:8.4.3:check -DfailBuildOnCVSS=11 -DautoUpdate=true"
                    archiveArtifacts artifacts: 'target/dependency-check-report.*', allowEmptyArchive: true
                }
            }
        }
        stage("Static Analysis") {
            steps {
                dir('devsecops-prestabanco-backend') {
                    withSonarQubeEnv("sonarqube-maven") {
                        sh "mvn clean verify sonar:sonar -Dsonar.projectKey=PrestaBanco-Backend -Dsonar.projectName='PrestaBanco Backend'"
                    }
                }
            }
        }
        stage("GitLeaks - Secret Detection") {
            steps {
                script {
                    sh '''
                        if ! command -v gitleaks &> /dev/null; then
                            echo "Installing GitLeaks..."
                            curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz | tar -xz -C /tmp
                            sudo mv /tmp/gitleaks /usr/local/bin/
                        fi
                    '''
                    
                    sh '''
                        echo "Running GitLeaks secret detection..."
                        gitleaks detect --source . --report-format json --report-path gitleaks-report.json --verbose || true
                        gitleaks detect --source . --report-format sarif --report-path gitleaks-report.sarif --verbose || true
                    '''
                    
                    archiveArtifacts artifacts: 'gitleaks-report.*', allowEmptyArchive: true
                    
                    script {
                        def reportExists = fileExists('gitleaks-report.json')
                        if (reportExists) {
                            def reportContent = readFile('gitleaks-report.json')
                            if (reportContent.trim() != "null" && reportContent.trim() != "[]") {
                                echo "GitLeaks found potential secrets! Check the report for details."
                            } else {
                                echo "No secrets detected by GitLeaks"
                            }
                        }
                    }
                }
            }
        }
        stage("Deploy image"){
            when {
                branch "main"
            }
            steps {
                dir('devsecops-prestabanco-backend') {
                    sh "docker build . -t prestabanco/backend:latest"
                }
            }
        }
    }
    post {
        success {
            dir('devsecops-prestabanco-backend') {
                archiveArtifacts artifacts: 'target/*.jar', followSymlinks: false, onlyIfSuccessful: true
            }
        }
    }
}